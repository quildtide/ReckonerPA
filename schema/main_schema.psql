CREATE TABLE reckoner.smurfs (
    alt_player_type VARCHAR,
    alt_player_id VARCHAR,
    PRIMARY KEY(alt_player_type, alt_player_id),
    main_player_type VARCHAR,
    main_player_id VARCHAR
);
CREATE INDEX smurfs_alt_uberid ON reckoner.smurfs(alt_player_type, alt_player_id);

CREATE TABLE reckoner.gamefeed (
    lobbyid BIGINT PRIMARY KEY,
    system_name VARCHAR,
    system_info_gamefeed JSONB,
    mods VARCHAR [],
    bounty FLOAT,
    FFA BOOL DEFAULT FALSE,
    sandbox BOOL DEFAULT FALSE,
    obs_time BIGINT,
    QBE BOOL DEFAULT FALSE
);
CREATE INDEX gamefeed_lobbyid ON reckoner.gamefeed(lobbyid);
CREATE INDEX gamefeed_FFA ON reckoner.gamefeed(FFA);
CREATE INDEX gamefeed_sandbox ON reckoner.gamefeed(sandbox);
CREATE INDEX gamefeed_QBE ON reckoner.gamefeed(QBE);


CREATE TABLE reckoner.matches (
    match_id BIGINT PRIMARY KEY,
    lobbyid BIGINT,
    duration FLOAT,
    time_start INT NOT NULL,
    time_end INT,
    titans BOOL,
    living VARCHAR [],
    patch INT,
    ranked BOOL,
    tourney BOOL,
    mod_penalty FLOAT,
    mods VARCHAR [],
    mod_versions VARCHAR [],
    dimension_names VARCHAR [],
    dimension_values FLOAT [],
    sources VARCHAR [],
    system_name VARCHAR,
    system_info JSONB,
    system_info_gamefeed JSONB,
    server VARCHAR,
    uberids BIGINT [],
    all_dead BOOL,
    source_superstats BOOL DEFAULT FALSE,
    source_river BOOL DEFAULT FALSE,
    source_pastats BOOL DEFAULT FALSE,
    source_corrections BOOL DEFAULT FALSE,
    source_replayfeed BOOL DEFAULT FALSE,
    source_recorder BOOL DEFAULT FALSE,
    source_gamefeed BOOL DEFAULT FALSE,
    source_local_bot BOOL DEFAULT FALSE,
    sandbox BOOL DEFAULT FALSE,
    bounty FLOAT,
    is_2w BOOL
);
CREATE INDEX matches_match_id ON reckoner.matches(match_id);
CREATE INDEX matches_lobbyid ON reckoner.matches USING HASH(lobbyid);
CREATE INDEX matches_time_start ON reckoner.matches(time_start);
CREATE INDEX matches_time_end ON reckoner.matches(time_end);
CREATE INDEX matches_scored ON reckoner.matches(scored) WHERE scored IS NULL;

CREATE TABLE reckoner.teams (
    match_id BIGINT REFERENCES reckoner.matches(match_id) ON UPDATE CASCADE,
    team_num SMALLINT,
    PRIMARY KEY (match_id, team_num),
    win BOOL,
    shared BOOL,
    size SMALLINT
);
CREATE INDEX teams_index on reckoner.teams(match_id, team_num);

CREATE TABLE reckoner.armies (
    match_id BIGINT REFERENCES reckoner.matches(match_id),
    player_num SMALLINT,
    PRIMARY KEY(match_id, player_num),
    username VARCHAR,
    alpha FLOAT,
    beta FLOAT,
    player_type VARCHAR,
    player_id VARCHAR,
    faction CHAR(1),
    eco10 SMALLINT,
    team_num SMALLINT,
    commanders SMALLINT DEFAULT 1,
    FOREIGN KEY (match_id, team_num) REFERENCES reckoner.teams(match_id, team_num) ON UPDATE CASCADE,
    win_chance FLOAT,
    rating_sd FLOAT
);
CREATE INDEX armies_player_id ON reckoner.armies USING HASH(player_system, player_id);
CREATE INDEX armies_index ON reckoner.armies(match_id, player_num);
CREATE INDEX armies_team_index ON reckoner.armies(match_id, team_num);

CREATE TABLE reckoner.mods (
    mod_id VARCHAR PRIMARY KEY,
    penalty FLOAT,
    parameters VARCHAR [],
    values FLOAT [],
    whitelist BOOL
);
CREATE INDEX mods_mod_id ON reckoner.mods USING HASH(mod_id);

CREATE TABLE reckoner.mod_aliases (
    alt_mod_id VARCHAR PRIMARY KEY,
    main_mod_id VARCHAR REFERENCES reckoner.mods(mod_id)
);
CREATE INDEX mod_aliases_alt_mod_id ON reckoner.mod_aliases USING HASH(alt_mod_id);

CREATE TABLE reckoner.name_history (
    player_type VARCHAR,
    player_id VARCHAR,
    username VARCHAR,
    PRIMARY KEY (player_type, player_id, username),
    times INT []
);
CREATE INDEX name_history_index ON reckoner.name_history(uberid, username);

CREATE TABLE reckoner.ubernames2 (
    uberid BIGINT PRIMARY KEY,
    ubername VARCHAR
);
CREATE INDEX ubernames_uberid ON reckoner.ubernames2(uberid);

