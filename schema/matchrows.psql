CREATE VIEW reckoner.matchrows AS
    SELECT
        a.match_id,
        time_start,
        titans,
        ranked,
        tourney,
        all_dead,

        a.team_num,
        win,
        shared,
        size as team_size,

        a.player_num,
        username,
        alpha,
        beta,
        win_chance,
        (eco10 / 10.0) as eco,
        rating_sd,

        team_size_mean,
        team_size_var,
        team_count,
        scored,

        eco_mean,
        eco_var,

        COALESCE(main_player_type, player_type) as player_type,
        COALESCE(main_player_id, player_id) as player_id
    
    FROM (
        SELECT
            match_id,
            team_num,
            player_num,
            username,
            alpha,
            beta,
            win_chance,
            eco10,
            player_type,
            player_id,
            rating_sd,

            AVG(eco10 / 10.0) OVER w AS eco_mean,
            VAR_SAMP(eco10 / 10.0) OVER w AS eco_var,
    
            EVERY(alpha IS NOT NULL AND beta IS NOT NULL AND win_chance IS NOT NULL) OVER w AS scored,
            (EVERY(player_id != '-1') OVER w AND EVERY(player_id != 'Idle') OVER w AND EVERY(player_id != 'Idle QBE') OVER w) AS players_valid
        FROM reckoner.armies
        WINDOW w AS (PARTITION BY match_id)) a

    INNER JOIN  (
        SELECT 
            match_id,
            team_num,
            win,
            shared,
            size,
            AVG(size) OVER v AS team_size_mean,
            VAR_SAMP(size) OVER v AS team_size_var,
            COUNT(team_num) OVER v AS team_count,
            SUM(win::INTEGER) OVER v AS winner_count
        FROM reckoner.teams
        WINDOW v AS (PARTITION BY match_id)
        ) b
    ON (a.match_id, a.team_num) = (b.match_id, b.team_num)

    INNER JOIN reckoner.matches c
    ON (a.match_id) = (c.match_id)

    LEFT JOIN reckoner.smurfs d
    ON (a.player_type, a.player_id) = (d.alt_player_type, d.alt_player_id)

    WHERE team_count > 1
    AND players_valid
    AND (all_dead or winner_count = 1) 
    AND NOT sandbox
;

CREATE MATERIALIZED VIEW reckoner.matchrows_mat AS
    SELECT * 
    FROM reckoner.matchrows
    WHERE SCORED;
CREATE INDEX ON reckoner.matchrows_mat(time_start);
CREATE INDEX ON reckoner.matchrows_mat(player_type, player_id);
CREATE UNIQUE INDEX ON reckoner.matchrows_mat(match_id, player_num);
